[
  {
    "id": "8419661f-8e57-42be-9cd1-9d25ac25c57a",
    "type": "heading",
    "props": {
      "backgroundColor": "default",
      "textColor": "default",
      "textAlignment": "left",
      "level": 1,
      "isToggleable": false
    },
    "content": [
      {
        "type": "text",
        "text": "未命名笔记",
        "styles": {}
      }
    ],
    "children": []
  },
  {
    "id": "cdd785c2-bb72-439f-bc86-b43670aa88cd",
    "type": "table",
    "props": {
      "textColor": "default"
    },
    "content": {
      "type": "tableContent",
      "columnWidths": [
        null,
        null,
        null
      ],
      "rows": [
        {
          "cells": [
            {
              "type": "tableCell",
              "content": [
                {
                  "type": "text",
                  "text": "dsdassdsa",
                  "styles": {}
                }
              ],
              "props": {
                "colspan": 1,
                "rowspan": 1,
                "backgroundColor": "default",
                "textColor": "default",
                "textAlignment": "left"
              }
            },
            {
              "type": "tableCell",
              "content": [],
              "props": {
                "colspan": 1,
                "rowspan": 1,
                "backgroundColor": "default",
                "textColor": "default",
                "textAlignment": "left"
              }
            },
            {
              "type": "tableCell",
              "content": [],
              "props": {
                "colspan": 1,
                "rowspan": 1,
                "backgroundColor": "default",
                "textColor": "default",
                "textAlignment": "left"
              }
            }
          ]
        },
        {
          "cells": [
            {
              "type": "tableCell",
              "content": [],
              "props": {
                "colspan": 1,
                "rowspan": 1,
                "backgroundColor": "default",
                "textColor": "default",
                "textAlignment": "left"
              }
            },
            {
              "type": "tableCell",
              "content": [],
              "props": {
                "colspan": 1,
                "rowspan": 1,
                "backgroundColor": "default",
                "textColor": "default",
                "textAlignment": "left"
              }
            },
            {
              "type": "tableCell",
              "content": [],
              "props": {
                "colspan": 1,
                "rowspan": 1,
                "backgroundColor": "default",
                "textColor": "default",
                "textAlignment": "left"
              }
            }
          ]
        }
      ]
    },
    "children": []
  },
  {
    "id": "1c2b6712-0bb0-4265-b6b6-6c7e3bb5c420",
    "type": "image",
    "props": {
      "textAlignment": "left",
      "backgroundColor": "default",
      "name": "1759064814199-791586.jpeg",
      "url": "http://localhost:3001/resources/images/1759064814199-791586007.jpeg",
      "caption": "",
      "showPreview": true
    },
    "children": []
  },
  {
    "id": "e5dbed03-7736-430c-b038-9d9f6af288f4",
    "type": "paragraph",
    "props": {
      "backgroundColor": "default",
      "textColor": "default",
      "textAlignment": "left"
    },
    "content": [
      {
        "type": "text",
        "text": "🤣 ",
        "styles": {}
      }
    ],
    "children": []
  },
  {
    "id": "3473967a-1a97-421e-9354-4a1517c0f963",
    "type": "image",
    "props": {
      "textAlignment": "left",
      "backgroundColor": "default",
      "name": "关注公众号（回复永久激活获取最新工具）.png",
      "url": "http://localhost:3001/resources/images/40c034870e6d270a440fd34934aaa1309d32a4351eda25aea3c9ba970a558505.png",
      "caption": "",
      "showPreview": true
    },
    "children": []
  },
  {
    "id": "daa4b628-53f9-4a14-8f15-4df89dde6481",
    "type": "image",
    "props": {
      "textAlignment": "left",
      "backgroundColor": "default",
      "name": "关注公众号（回复永久激活获取最新工具）.png",
      "url": "http://localhost:3001/resources/images/40c034870e6d270a440fd34934aaa1309d32a4351eda25aea3c9ba970a558505.png",
      "caption": "",
      "showPreview": true
    },
    "children": []
  },
  {
    "id": "89070ab8-cc51-4642-bad7-a072559630db",
    "type": "codeBlock",
    "props": {
      "language": "python"
    },
    "content": [
      {
        "type": "text",
        "text": "import os as H\nimport platform as s\nimport tempfile as t\nimport shutil as u\nimport time as T\nimport psutil as P\nfrom typing import Any\nfrom colorama import Fore as C, Style as D, init\n\ninit(autoreset=True)\n\n# 图标映射（仅用于美化输出）\nE = {\n    '⚙️': '⚙️',   # PROCESS\n    '✅': '✅',   # SUCCESS\n    '❌': '❌',   # ERROR\n    'ℹ️': 'ℹ️',   # INFO\n    '📄': '📄',   # FILE\n    '⏳': '⏳',   # WAIT\n}\n\ndef find_qoder_js_file():\n    \"\"\"定位 Qoder 的 workbench.desktop.main.js 文件\"\"\"\n    if s.system() != 'Windows':\n        raise OSError(f\"不支持的操作系统: {s.system()}. 此脚本仅支持 Windows.\")\n\n    file_name = 'out\\\\vs\\\\workbench\\\\workbench.desktop.main.js'\n    candidates = []\n\n    localappdata = H.getenv('LOCALAPPDATA')\n    if localappdata:\n        candidates.append(H.path.join(localappdata, 'Programs', 'Qoder', 'resources', 'app', file_name))\n\n    appdata = H.getenv('APPDATA')\n    if appdata:\n        candidates.append(H.path.join(appdata, '..', 'Local', 'Programs', 'Qoder', 'resources', 'app', file_name))\n\n    # 常见安装路径\n    username = H.getenv('USERNAME', '')\n    common_paths = [\n        f'C:\\\\Users\\\\{username}\\\\AppData\\\\Local\\\\Programs\\\\Qoder\\\\resources\\\\app',\n        'C:\\\\Program Files\\\\Qoder\\\\resources\\\\app',\n        'C:\\\\Program Files (x86)\\\\Qoder\\\\resources\\\\app'\n    ]\n    for base in common_paths:\n        candidates.append(H.path.join(base, file_name))\n\n    # 去重并检查存在\n    seen = set()\n    unique_candidates = []\n    for p in candidates:\n        if p not in seen:\n            unique_candidates.append(p)\n            seen.add(p)\n\n    for path in unique_candidates:\n        if H.path.exists(path):\n            return H.path.abspath(path)\n\n    error_msg = \"❌ 未找到 Qoder 的 main.js 文件。搜索路径:\\n\"\n    for i, path in enumerate(unique_candidates, 1):\n        error_msg += f\"  {i}. {path}\\n\"\n    error_msg += \"\\n请确保 Qoder 已正确安装。\"\n    raise FileNotFoundError(error_msg)\n\n\ndef patch_js_file(file_path: str) -> bool:\n    \"\"\"修改 JS 文件以绕过 Token 限制\"\"\"\n    print(f\"{C.CYAN}📄 正在读取文件: {file_path}{D.RESET_ALL}\")\n    try:\n        # 获取原文件权限和元数据\n        stat_info = H.stat(file_path)\n        original_mode = stat_info.st_mode\n        uid = getattr(stat_info, 'st_uid', None)\n        gid = getattr(stat_info, 'st_gid', None)\n\n        with open(file_path, 'r', encoding='utf-8', errors='ignore') as f:\n            content = f.read()\n\n        # 定义替换规则\n        replacements = {\n            # 提升 Token 限制（原为 200k，改为 9,000,000）\n            'async getEffectiveTokenLimit(e){const n=e.modelName;if(!n)return 2e5;':\n                'async getEffectiveTokenLimit(e){return 9000000;const n=e.modelName;if(!n)return 9e5;}',\n\n            # 隐藏“Upgrade to Pro”按钮（多处）\n            'B(k,D(Ln,{title:\"Upgrade to Pro\",size:\"small\",get codicon(){return t.pay}}),null)':\n                'B(k,D(Ln,{title:\"Qoder Bypass\",size:\"small\",get codicon(){return t.github},get onClick(){return function(){window.open(\"https://github.com/qoder-ai\",\"_blank\")}}}),null)',\n\n            'M(x,I(as,{title:\"Upgrade to Pro\",size:\"small\",get codicon(){return $.rocket},get onClick(){return t.pay}}),null)':\n                'M(x,I(as,{title:\"Qoder Bypass\",size:\"small\",get codicon(){return $.github},get onClick(){return function(){window.open(\"https://github.com/qoder-ai\",\"_blank\")}}}),null)',\n\n            '$(k,E(Ks,{title:\"Upgrade to Pro\",size:\"small\",get codicon(){return F.rocket},get onClick(){return t.pay}}),null)':\n                '$(k,E(Ks,{title:\"Qoder Bypass\",size:\"small\",get codicon(){return F.github},get onClick(){return function(){window.open(\"https://github.com/qoder-ai\",\"_blank\")}}}),null)',\n\n            # 修改显示文本\n            '<div>Pro Trial': '<div>Pro',\n            'py-1\">Auto-select': 'py-1\">Bypass-Active',\n\n            # 隐藏通知区域（可选）\n            'notifications-toasts': 'notifications-toasts hidden',\n\n            # 在用户信息处添加 Pro 标识\n            'var DWr=ne(\"<div class=settings__item_description>You are currently signed in with <strong></strong>.\");':\n                'var DWr=ne(\"<div class=settings__item_description>You are currently signed in with <strong></strong>. <h1>Pro</h1>\");',\n        }\n\n        # 执行替换\n        modified = content\n        for old, new in replacements.items():\n            if old in modified:\n                modified = modified.replace(old, new)\n\n        if modified == content:\n            print(f\"{C.YELLOW}⚠️  文件未修改（可能已打过补丁或版本不匹配）{D.RESET_ALL}\")\n            return True\n\n        # 写入临时文件\n        with t.NamedTemporaryFile(mode='w', encoding='utf-8', delete=False) as tmp:\n            tmp.write(modified)\n            tmp_path = tmp.name\n\n        # 替换原文件\n        H.remove(file_path)\n        u.move(tmp_path, file_path)\n        H.chmod(file_path, original_mode)\n\n        # 尝试恢复所有者（Windows 通常不需要）\n        try:\n            if uid is not None and gid is not None:\n                H.chown(file_path, uid, gid)\n        except (AttributeError, OSError):\n            pass  # 忽略 chown 错误（Windows 不支持）\n\n        print(f\"{C.GREEN}✅ Token 限制绕过已应用！{D.RESET_ALL}\")\n        return True\n\n    except Exception as e:\n        print(f\"{C.RED}❌ 修改文件失败: {e}{D.RESET_ALL}\")\n        return False\n\n\ndef quit_qoder_processes(timeout: int = 5) -> bool:\n    \"\"\"终止所有 Qoder 进程\"\"\"\n    print(f\"{C.CYAN}⏳ 正在关闭 Qoder 进程...{D.RESET_ALL}\")\n    qoder_procs = []\n    try:\n        for proc in P.process_iter(['pid', 'name']):\n            try:\n                name = proc.info['name']\n                if name and name.lower() in ('qoder.exe', 'qoder'):\n                    qoder_procs.append(proc)\n            except (P.NoSuchProcess, P.AccessDenied):\n                continue\n\n        if not qoder_procs:\n            print(f\"{C.GREEN}ℹ️  未检测到运行中的 Qoder 进程。{D.RESET_ALL}\")\n            return True\n\n        # 终止进程\n        for proc in qoder_procs:\n            try:\n                if proc.is_running():\n                    print(f\"{C.YELLOW}⚙️  终止 PID {proc.pid}...{D.RESET_ALL}\")\n                    proc.terminate()\n            except (P.NoSuchProcess, P.AccessDenied):\n                continue\n\n        # 等待退出\n        start = T.time()\n        while T.time() - start < timeout:\n            alive = [p for p in qoder_procs if p.is_running()]\n            if not alive:\n                print(f\"{C.GREEN}✅ 所有 Qoder 进程已关闭。{D.RESET_ALL}\")\n                return True\n            T.sleep(0.5)\n\n        # 强制 kill（可选）\n        for proc in qoder_procs:\n            try:\n                if proc.is_running():\n                    proc.kill()\n            except (P.NoSuchProcess, P.AccessDenied):\n                continue\n\n        print(f\"{C.RED}❌ 超时：部分进程可能未完全退出，请手动关闭。{D.RESET_ALL}\")\n        return False\n\n    except Exception as e:\n        print(f\"{C.RED}❌ 关闭进程时出错: {e}{D.RESET_ALL}\")\n        return False\n\n\ndef main():\n    print(f\"{C.CYAN}🚀 Qoder Token 绕过工具（无授权版）启动...{D.RESET_ALL}\")\n    try:\n        # 1. 查找文件\n        js_path = find_qoder_js_file()\n        print(f\"{C.CYAN}📄 找到目标文件: {js_path}{D.RESET_ALL}\")\n\n        # 2. 修改文件\n        if not patch_js_file(js_path):\n            return\n\n        # 3. 关闭 Qoder\n        quit_qoder_processes(timeout=5)\n\n        print(f\"\\n{C.GREEN}🎉 操作完成！请重新启动 Qoder。{D.RESET_ALL}\")\n        print(f\"{C.YELLOW}💡 提示：若未生效，请以管理员身份运行此脚本。{D.RESET_ALL}\")\n\n    except Exception as e:\n        print(f\"{C.RED}❌ 脚本执行失败: {e}{D.RESET_ALL}\")\n\n\nif __name__ == '__main__':\n    main()",
        "styles": {}
      }
    ],
    "children": []
  },
  {
    "id": "c3a47012-5b64-44f0-8e81-c6cff76f7220",
    "type": "image",
    "props": {
      "textAlignment": "left",
      "backgroundColor": "default",
      "name": "1759066072672-128970527.png",
      "url": "http://localhost:3001/resources/images/1759066072672-128970527.png",
      "caption": "",
      "showPreview": true
    },
    "children": []
  },
  {
    "id": "36ad929c-503d-474d-9dff-79d8e937f318",
    "type": "paragraph",
    "props": {
      "backgroundColor": "default",
      "textColor": "default",
      "textAlignment": "left"
    },
    "content": [],
    "children": []
  }
]